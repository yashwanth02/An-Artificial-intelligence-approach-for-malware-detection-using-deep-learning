from tkinter import messagebox
from tkinter import *
from tkinter.filedialog import askopenfilename
from tkinter import simpledialog
import tkinter
import numpy as np
from tkinter import filedialog
import pandas as pd 
from sklearn.model_selection import train_test_split 
from sklearn.metrics import accuracy_score 
import matplotlib.pyplot as plt
from sklearn.naive_bayes import BernoulliNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn import svm
from keras.models import Sequential
from keras.layers import Convolution2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense,Activation,BatchNormalization,Dropout
from sklearn.preprocessing import OneHotEncoder
from keras.models import model_from_json
from keras.layers import LSTM
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import Normalizer
import keras.layers
from keras.models import model_from_json

main = tkinter.Tk()
main.title("Malware Detection Using Deep Learning")
main.geometry("1300x1200")

malware_name = ['Dialer Adialer.C','Backdoor Agent.FYI','Worm Allaple.A','Worm Allaple.L','Trojan Alueron.gen','Worm:AutoIT Autorun.K',
'Trojan C2Lop.P','Trojan C2Lop.gen','Dialer Dialplatform.B','Trojan Downloader Dontovo.A','Rogue Fakerean','Dialer Instantaccess',
'PWS Lolyda.AA 1','PWS Lolyda.AA 2','PWS Lolyda.AA 3','PWS Lolyda.AT','Trojan Malex.gen','Trojan Downloader Obfuscator.AD',
'Backdoor Rbot!gen','Trojan Skintrim.N','Trojan Downloader Swizzor.gen!E','Trojan Downloader Swizzor.gen!I','Worm VB.AT',
'Trojan Downloader Wintrim.BX','Worm Yuner.A']


global filename
global knn_precision,nb_precision,tree_precision,svm_precision,random_precision,cnn_precision,lstm_precision
global knn_recall,nb_recall,tree_recall,svm_recall,random_recall,cnn_recall,lstm_recall
global knn_fmeasure,nb_fmeasure,tree_fmeasure,svm_fmeasure,random_fmeasure,cnn_fmeasure,lstm_fmeasure
global knn_acc,nb_acc,tree_acc,svm_acc,random_acc,cnn_acc,lstm_acc

global classifier
global X_train, X_test, y_train, y_test

def load_lstmcnn(dataset, standardize=True):
    features = dataset['arr'][:, 0]
    features = np.array([feature for feature in features])
    features = np.reshape(features, (features.shape[0], features.shape[1] * features.shape[2]))
    if standardize:
        features = StandardScaler().fit_transform(features)

    labels = dataset['arr'][:, 1]
    labels = np.array([label for label in labels])
    
    print(labels.shape)
    print(features.shape)
    
    return features, labels

def load_data(dataset, standardize=True):
    features = dataset['arr'][:, 0]
    features = np.array([feature for feature in features])
    features = np.reshape(features, (features.shape[0], features.shape[1] * features.shape[2]))
    if standardize:
        features = StandardScaler().fit_transform(features)

    labels = dataset['arr'][:, 1]
    labels = np.array([label for label in labels])

    feature = []
    label = []
    for i in range(0,4000): 
        feature.append(features[i])
        label.append(labels[i])

    feature = np.asarray(feature)
    label = np.asarray(label)
    print(labels.shape)
    print(features.shape)
    print(label.shape)
    print(feature.shape)
    return feature, label


def upload():
    global filename
    filename = filedialog.askopenfilename(initialdir = "dataset")
    pathlabel.config(text=filename)
    text.delete('1.0', END)
    text.insert(END,'MalImg dataset loaded\n')
    

def prediction(X_test, cls): 
    y_pred = cls.predict(X_test) 
    for i in range(len(X_test)):
      print("X=%s, Predicted=%s" % (X_test[i], y_pred[i]))
    return y_pred 
	
def KNN():
    global knn_precision
    global knn_recall
    global knn_fmeasure
    global knn_acc
    text.delete('1.0', END)
    cls = KNeighborsClassifier(n_neighbors = 10) 
    cls.fit(X_train, y_train) 
    text.insert(END,"KNN Prediction Results\n\n") 
    prediction_data = prediction(X_test, cls)
    knn_precision = precision_score(y_test, prediction_data,average='micro') * 100
    knn_recall = recall_score(y_test, prediction_data,average='micro') * 100
    knn_fmeasure = f1_score(y_test, prediction_data,average='micro') * 100
    knn_acc = accuracy_score(y_test,prediction_data)*100
    text.insert(END,"KNN Precision : "+str(knn_precision)+"\n")
    text.insert(END,"KNN Recall : "+str(knn_recall)+"\n")
    text.insert(END,"KNN FMeasure : "+str(knn_fmeasure)+"\n")
    text.insert(END,"KNN Accuracy : "+str(knn_acc)+"\n")
    
def naivebayes():
    global nb_precision
    global nb_recall
    global nb_fmeasure
    global nb_acc
    text.delete('1.0', END)
    data, labels = load_data(np.load(filename,allow_pickle=True))
    X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2)
    scaler = Normalizer().fit(X_train)
    X_train = scaler.transform(X_train)
    scaler = Normalizer().fit(X_test)
    X_test = scaler.transform(X_test)
    cls = BernoulliNB(binarize=0.0)
    cls.fit(X_train, y_train)
    text.insert(END,"Naive Bayes Prediction Results\n\n") 
    prediction_data = prediction(X_test, cls) 
    nb_precision = precision_score(y_test, prediction_data,average='micro') * 100
    nb_recall = recall_score(y_test, prediction_data,average='micro') * 100
    nb_fmeasure = f1_score(y_test, prediction_data,average='micro') * 100
    nb_acc = accuracy_score(y_test,prediction_data)*100
    text.insert(END,"Naive Bayes Precision : "+str(nb_precision)+"\n")
    text.insert(END,"Naive Bayes Recall : "+str(nb_recall)+"\n")
    text.insert(END,"Naive Bayes FMeasure : "+str(nb_fmeasure)+"\n")
    text.insert(END,"Naive Bayes Accuracy : "+str(nb_acc)+"\n")

def decisionTree():
    text.delete('1.0', END)
    global tree_acc
    global tree_precision
    global tree_recall
    global tree_fmeasure
    rfc = DecisionTreeClassifier(criterion = "entropy", splitter = "random", max_depth = 20,  min_samples_split = 50, min_samples_leaf = 20, max_features = 5)
    rfc.fit(X_train, y_train)
    text.insert(END,"Decision Tree Prediction Results\n") 
    prediction_data = prediction(X_test, rfc) 
    tree_precision = precision_score(y_test, prediction_data,average='micro') * 100
    tree_recall = recall_score(y_test, prediction_data,average='micro') * 100
    tree_fmeasure = f1_score(y_test, prediction_data,average='micro') * 100
    tree_acc = accuracy_score(y_test,prediction_data)*100
    text.insert(END,"Decision Tree Precision : "+str(tree_precision)+"\n")
    text.insert(END,"Decision Tree Recall : "+str(tree_recall)+"\n")
    text.insert(END,"Decision Tree FMeasure : "+str(tree_fmeasure)+"\n")
    text.insert(END,"Decision Tree Accuracy : "+str(tree_acc)+"\n")
    
def randomForest():
    text.delete('1.0', END)
    global random_acc
    global random_precision
    global random_recall
    global random_fmeasure
    rfc = RandomForestClassifier(n_estimators=200, random_state=0)
    rfc.fit(X_train, y_train)
    text.insert(END,"Random Forest Prediction Results\n") 
    prediction_data = prediction(X_test, rfc) 
    random_precision = precision_score(y_test, prediction_data,average='micro') * 100
    random_recall = recall_score(y_test, prediction_data,average='micro') * 100
    random_fmeasure = f1_score(y_test, prediction_data,average='micro') * 100
    random_acc = accuracy_score(y_test,prediction_data)*100
    text.insert(END,"Random Forest Precision : "+str(random_precision)+"\n")
    text.insert(END,"Random Forest Recall : "+str(random_recall)+"\n")
    text.insert(END,"Random Forest FMeasure : "+str(random_fmeasure)+"\n")
    text.insert(END,"Random Forest Accuracy : "+str(random_acc)+"\n")
    
def SVM():
    text.delete('1.0', END)
    global svm_acc
    global svm_precision
    global svm_recall
    global svm_fmeasure
    global X_train, X_test, y_train, y_test
    data, labels = load_data(np.load(filename,allow_pickle=True))
    X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2)
    print("hello")
    rfc = svm.SVC(C=2.0,gamma='scale',kernel = 'rbf', random_state = 2)
    rfc.fit(X_train, y_train)
    text.insert(END,"SVM Prediction Results\n") 
    prediction_data = prediction(X_test, rfc) 
    svm_precision = precision_score(y_test, prediction_data,average='micro') * 100
    svm_recall = recall_score(y_test, prediction_data,average='micro') * 100
    svm_fmeasure = f1_score(y_test, prediction_data,average='micro') * 100
    svm_acc = accuracy_score(y_test,prediction_data)*100
    text.insert(END,"SVM Precision : "+str(svm_precision)+"\n")
    text.insert(END,"SVM Recall : "+str(svm_recall)+"\n")
    text.insert(END,"SVM FMeasure : "+str(svm_fmeasure)+"\n")
    text.insert(END,"SVM Accuracy : "+str(svm_acc)+"\n")

def LSTM():
    global lstm_acc
    global lstm_precision
    global lstm_recall
    global lstm_fmeasure
    text.delete('1.0', END)

    data, labels = load_lstmcnn(np.load(filename,allow_pickle=True))
    labels = labels.reshape((9339,1))
    print(labels)
    print(data.shape)
    data = data.reshape((9339, 32, 32))
    X_train1, X_test1, y_train1, y_test1 = train_test_split(data, labels, test_size=0.101)
    enc = OneHotEncoder()
    enc.fit(y_train1)  
    print(y_train1.shape)
    y_train1  = enc.transform(y_train1)
    y_test1   = enc.transform(y_test1)
    #rehsaping traing
    print("X_train.shape before  = ",X_train1.shape)
    X_train1 = X_train1.reshape((8395, 32, 32))   
    print("X_train.shape after  = ",X_train1.shape)                      
    print("y_train.shape  = ",y_train1.shape)
    #rehsaping testing
    print("X_test.shape before  = ",X_test1.shape)
    X_test1 = X_test1.reshape((944, 32, 32))      
    print("X_test.shape after  = ",X_test1.shape)      
    print("y_test.shape  = ",y_test1.shape)

    model = Sequential()
    model.add(keras.layers.LSTM(100,input_shape=(32, 32)))
    model.add(Dropout(0.5))
    model.add(Dense(100, activation='relu'))
    model.add(Dense(25, activation='softmax'))
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
    print(model.summary())
    model.fit(X_train1, y_train1, epochs=8, batch_size=64)
    prediction_data = model.predict(X_test1)
    prediction_data = np.argmax(prediction_data, axis=1)
    y_test1 = np.argmax(y_test1, axis=1)
    lstm_precision = precision_score(y_test1, prediction_data,average='micro') * 100
    lstm_recall = recall_score(y_test1, prediction_data,average='micro') * 100
    lstm_fmeasure = f1_score(y_test1, prediction_data,average='micro') * 100
    lstm_acc = accuracy_score(y_test1,prediction_data)*100
    text.insert(END,"LSTM Prediction Results\n") 
    text.insert(END,"LSTM Precision : "+str(lstm_precision)+"\n")
    text.insert(END,"LSTM Recall : "+str(lstm_recall)+"\n")
    text.insert(END,"LSTM FMeasure : "+str(lstm_fmeasure)+"\n")
    text.insert(END,"LSTM Accuracy : "+str(lstm_acc)+"\n")
    #scores = model.evaluate(X_test, y_test, verbose=0)
    #print("Accuracy: %.2f%%" % (scores[1]*100))

def CNN():
    global cnn_acc
    global cnn_precision
    global cnn_recall
    global cnn_fmeasure
    text.delete('1.0', END)

    data, labels = load_lstmcnn(np.load(filename,allow_pickle=True))
    labels = labels.reshape((9339,1))
    print(labels)
    data = data.reshape((9339, 32, 32))
    X_train1, X_test1, y_train1, y_test1 = train_test_split(data, labels, test_size=0.101)
    enc = OneHotEncoder()
    enc.fit(y_train1)  
    print(y_train1.shape)
    y_train1  = enc.transform(y_train1)
    y_test1   = enc.transform(y_test1)
    #rehsaping traing
    print("X_train.shape before  = ",X_train1.shape)
    X_train1 = X_train1.reshape((8395, 32, 32,1))   
    print("X_train.shape after  = ",X_train1.shape)                      
    print("y_train.shape  = ",y_train1.shape)
    #rehsaping testing
    print("X_test.shape before  = ",X_test1.shape)
    X_test1 = X_test1.reshape((944, 32, 32,1))      
    print("X_test.shape after  = ",X_test1.shape)      
    print("y_test.shape  = ",y_test1.shape)

    classifier = Sequential()
    classifier.add(Convolution2D(32, (3, 3), border_mode='valid', input_shape=(32, 32, 1)))
    classifier.add(BatchNormalization())
    classifier.add(Activation("relu"))
    classifier.add(Convolution2D(32, (3, 3),  border_mode='valid'))
    classifier.add(BatchNormalization())
    classifier.add(Activation("relu"))
    classifier.add(MaxPooling2D(pool_size=(2, 2)))
    classifier.add(Flatten())
    classifier.add(Dense(128))
    classifier.add(BatchNormalization())
    classifier.add(Activation("relu"))
    classifier.add(Dense(25))
    classifier.add(BatchNormalization())
    classifier.add(Activation("softmax"))
    classifier.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    classifier.fit(X_train1, y_train1,epochs = 5,batch_size=64)

    prediction_data = classifier.predict(X_test1)
    prediction_data = np.argmax(prediction_data, axis=1)
    y_test1 = np.argmax(y_test1, axis=1)
    cnn_precision = precision_score(y_test1, prediction_data,average='micro') * 100
    cnn_recall = recall_score(y_test1, prediction_data,average='micro') * 100
    cnn_fmeasure = f1_score(y_test1, prediction_data,average='micro') * 100
    cnn_acc = accuracy_score(y_test1,prediction_data)*100
    text.insert(END,"CNN Prediction Results\n") 
    text.insert(END,"CNN Precision : "+str(cnn_precision)+"\n")
    text.insert(END,"CNN Recall : "+str(cnn_recall)+"\n")
    text.insert(END,"CNN FMeasure : "+str(cnn_fmeasure)+"\n")
    text.insert(END,"CNN Accuracy : "+str(cnn_acc)+"\n")

def predict():
    filename = filedialog.askopenfilename(initialdir="images")
    text.delete('1.0', END)
    text.insert(END, filename + " loaded\n\n")
    with open('model.json', "r") as json_file:
        loaded_model_json = json_file.read()
        loaded_model = model_from_json(loaded_model_json)
    loaded_model.load_weights("model_weights.h5")
    loaded_model._make_predict_function()
    print(loaded_model.summary())

    img = np.load(filename)
    im2arr = img.reshape(1, 32, 32, 1)
    preds = loaded_model.predict(im2arr)
    predict = np.argmax(preds)
    if predict < len(malware_name):
        text.insert(END, 'Uploaded file contains malware from family: ' + malware_name[predict])
    else:
        text.insert(END, 'Malware not found')

def precisionGraph():
    height = [knn_precision,nb_precision,tree_precision,svm_precision,random_precision,cnn_precision,lstm_precision]
    bars = ('KNN Precision', 'NB Precision','DT Precision','SVM Precision','RF Precision','CNN Precision','LSTM Precision')
    y_pos = np.arange(len(bars))
    plt.bar(y_pos, height)
    plt.xticks(y_pos, bars)
    plt.show()

def recallGraph():
    height = [knn_recall,nb_recall,tree_recall,svm_recall,random_recall,cnn_recall,lstm_recall]
    bars = ('KNN Recall', 'NB Recall','DT Recall','SVM Recall','RF Recall','CNN Recall','LSTM Recall')
    y_pos = np.arange(len(bars))
    plt.bar(y_pos, height)
    plt.xticks(y_pos, bars)
    plt.show()
    
def fscoreGraph():
    height = [knn_fmeasure,nb_fmeasure,tree_fmeasure,svm_fmeasure,random_fmeasure,cnn_fmeasure,lstm_fmeasure]
    bars = ('KNN FScore', 'NB FScore','DT FScore','SVM FScore','RF FScore','CNN FScore','LSTM FScore')
    y_pos = np.arange(len(bars))
    plt.bar(y_pos, height)
    plt.xticks(y_pos, bars)
    plt.show()  
    
def accuracyGraph():
    height = [knn_acc,nb_acc,tree_acc,svm_acc,random_acc,cnn_acc,lstm_acc]
    bars = ('KNN ACC','NB ACC','DT ACC','SVM ACC','RF ACC','CNN ACC','LSTM ACC')
    y_pos = np.arange(len(bars))
    plt.bar(y_pos, height)
    plt.xticks(y_pos, bars)
    plt.show()  

font = ('times', 16, 'bold')
title = Label(main, text='Malware Detection Using Deep Learning')
title.config(bg='dark goldenrod', fg='white')  
title.config(font=font)           
title.config(height=3, width=120)       
title.place(x=0,y=5)

font1 = ('times', 14, 'bold')
upload = Button(main, text="Upload Malware MalImg Dataset", command=upload)
upload.place(x=700,y=100)
upload.config(font=font1)  

pathlabel = Label(main)
pathlabel.config(bg='DarkOrange1', fg='white')  
pathlabel.config(font=font1)           
pathlabel.place(x=700,y=150)

svmButton = Button(main, text="Run SVM Algorithm", command=SVM)
svmButton.place(x=700,y=200)
svmButton.config(font=font1) 

knnButton = Button(main, text="Run KNN Algorithm", command=KNN)
knnButton.place(x=700,y=250)
knnButton.config(font=font1) 

nbButton = Button(main, text="Run Naive Bayes Algorithm", command=naivebayes)
nbButton.place(x=700,y=300)
nbButton.config(font=font1)

treeButton = Button(main, text="Run Decision Tree Algorithm", command=decisionTree)
treeButton.place(x=700,y=350)
treeButton.config(font=font1)

randomButton = Button(main, text="Run Random Forest Algorithm", command=randomForest)
randomButton.place(x=700,y=450)
randomButton.config(font=font1)

cnnButton = Button(main, text="Run CNN", command=CNN)
cnnButton.place(x=700,y=500)
cnnButton.config(font=font1)

lstmButton = Button(main, text="Run LSTM", command=LSTM)
lstmButton.place(x=900,y=500)
lstmButton.config(font=font1)

graphButton = Button(main, text="Precision Graph", command=precisionGraph)
graphButton.place(x=700,y=550)
graphButton.config(font=font1)

recallButton = Button(main, text="Recall Graph", command=recallGraph)
recallButton.place(x=900,y=550)
recallButton.config(font=font1)

scoreButton = Button(main, text="Fscore Graph", command=fscoreGraph)
scoreButton.place(x=700,y=600)
scoreButton.config(font=font1)

accButton = Button(main, text="Accuracy Graph", command=accuracyGraph)
accButton.place(x=900,y=600)
accButton.config(font=font1)

predictButton = Button(main, text="Predict Malware Family", command=predict)
predictButton.place(x=700,y=650)
predictButton.config(font=font1)

font1 = ('times', 12, 'bold')
text=Text(main,height=30,width=80)
scroll=Scrollbar(text)
text.configure(yscrollcommand=scroll.set)
text.place(x=10,y=100)
text.config(font=font1)

main.config(bg='turquoise')
main.mainloop()